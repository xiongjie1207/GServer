package com.gserver.plugins.db.generator;

import org.apache.commons.lang.StringUtils;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;

public class DaoGenerator {
    protected String packageTemplate = "package %s;\n\n";
    protected String importTemplate =
            "import org.springframework.cache.annotation.CacheEvict;\n" +
                    "import org.springframework.cache.annotation.Cacheable;\n" +
                    "import org.springframework.cache.annotation.Caching;\n" +
                    "import com.gserver.plugins.db.descriptor.QueryResult;\n" +
                    "import com.gserver.plugins.db.spring.jdbc.SpringJDBCBuilder;\n" +
                    "import org.springframework.aop.framework.AopContext;\n" +
                    "import %s.%s;\n\n";
    protected String classDescriptTemplate = "/**\n * Generated by GServer, do not modify this file.\n **/\n";
    protected String methodLoadAnnotationTemplate = "@Cacheable(value = \"%s\", key = \"'%s_id/'+#%s\")\n\t";
    protected String methodUpdateAnnotationTemplate = "@Caching(evict = { @CacheEvict(value = \"%s\", key = \"'%s_id/'+#entity.%s\") })\n\t";
    protected String methodDeleteAnnotationTemplate = "@Caching(evict = { @CacheEvict(value = \"%s\", key = \"'%s_id/'+#entity.%s\") })\n\t";

    protected String classDefineTemplate = "public abstract class BaseDao%s implements IDao%s{\n\t";
    protected String aopContextTemplate = "protected IDao%s currentProxy(){\n\t\t"+
            "return (IDao%s)AopContext.currentProxy();\n\t"+
            "}\n\t";
    protected String methodLoadDefineTemplate = "public %s load(%s id) {\n\t\t" +
            "QueryResult result = SpringJDBCBuilder.getInstance().buildDAL().selectByPrimaryKey(%s.class, id);\n\t\t" +
            "if (result != null) {\n\t\t\t" +
            "return result.as(%s.class);\n\t\t" +
            "}\n\t\t" +
            "return null;\n\t" +
            "}\n\t";
    protected String methodUpdateDefineTemplate = "public void update(%s entity) {\n\t\t" +
            "SpringJDBCBuilder.getInstance().buildDAL().updateByPrimaryKey(entity);\n\t" +
            "}\n\t";
    protected String methodDeleteDefineTemplate = "public void delete(%s entity) {\n\t\t" +
            "SpringJDBCBuilder.getInstance().buildDAL().deleteByPrimaryKey(%s.class, entity.get%s());\n\t" +
            "}\n\t";
    protected String methodInsertDefineTemplate = "public Object insert(%s entity) {\n\t\t" +
            "return SpringJDBCBuilder.getInstance().buildDAL().insert(entity);\n\t" +
            "}\n\t";

    protected String daoPackageName;
    protected String daoOutputDir;
    protected String modelPakageName;
    protected String cacheName = "";

    public DaoGenerator(String cacheName, String daoPackageName, String modelPakageName, String daoOutputDir) {
        if (StringUtils.isBlank(cacheName))
            throw new IllegalArgumentException("daoPackageName can not be blank.");
        if (StringUtils.isBlank(daoPackageName))
            throw new IllegalArgumentException("daoPackageName can not be blank.");
        if (StringUtils.isBlank(modelPakageName))
            throw new IllegalArgumentException("modelPackageName can not be blank.");
        if (daoPackageName.contains("/") || daoPackageName.contains("\\"))
            throw new IllegalArgumentException("daoPackageName error : " + daoPackageName);
        if (modelPakageName.contains("/") || modelPakageName.contains("\\"))
            throw new IllegalArgumentException("modelPakageName error : " + modelPakageName);
        if (StringUtils.isBlank(daoOutputDir))
            throw new IllegalArgumentException("daoOutputDir can not be blank.");

        this.daoPackageName = daoPackageName;
        this.modelPakageName = modelPakageName;
        this.daoOutputDir = daoOutputDir;
        this.cacheName = cacheName;
    }

    public void generate(List<TableMeta> tableMetas) {
        System.out.println("Generate base dao ...");
        for (TableMeta tableMeta : tableMetas)
            genDaoContent(tableMeta);
        wirtToFile(tableMetas);
    }

    protected void genDaoContent(TableMeta tableMeta) {
        StringBuilder ret = new StringBuilder();
        genPackage(ret);
        genImport(tableMeta, ret);
        genClassDes(ret);
        genClassDefine(tableMeta, ret);
        genMethodLoadAnnotation(tableMeta, ret);
        genMethodLoad(tableMeta, ret);

        genMethodDeleteAnnotation(tableMeta, ret);
        genMethodDelete(tableMeta, ret);

        genMethodUpdateAnnotation(tableMeta, ret);
        genMethodUpdate(tableMeta, ret);

        genMethodInsert(tableMeta, ret);
        genMethodProxy(tableMeta,ret);

        ret.append(String.format("%n"));
        ret.append(String.format("}%n"));
        tableMeta.modelContent = ret.toString();
    }

    protected void genPackage(StringBuilder ret) {
        ret.append(String.format(packageTemplate, daoPackageName));
    }

    protected void genImport(TableMeta tableMeta, StringBuilder ret) {
        String entityName = tableMeta.entityName.replace("_", "");
        ret.append(String.format(importTemplate,modelPakageName, entityName));
    }
    protected void genMethodProxy(TableMeta tableMeta,StringBuilder ret){
        String entityName = tableMeta.entityName.replace("_", "");
        ret.append(String.format(aopContextTemplate,entityName,entityName));
    }
    protected void genClassDefine(TableMeta tableMeta, StringBuilder ret) {
        String entityName = tableMeta.entityName.replace("_", "");
        ret.append(String.format(classDefineTemplate, entityName,entityName));
    }

    protected void genClassDes(StringBuilder ret) {
        ret.append(classDescriptTemplate);
    }

    /**
     * 生成加载方法的注解
     *
     * @param tableMeta
     * @param ret
     */
    protected void genMethodLoadAnnotation(TableMeta tableMeta, StringBuilder ret) {
        ret.append(String.format(methodLoadAnnotationTemplate, cacheName, tableMeta.entityName.replace("_", ""), tableMeta.primaryKey));
    }

    /**
     * 生成更新方法的注解
     *
     * @param tableMeta
     * @param ret
     */
    protected void genMethodUpdateAnnotation(TableMeta tableMeta, StringBuilder ret) {
        ret.append(String.format(methodUpdateAnnotationTemplate, cacheName, tableMeta.entityName.replace("_", ""), tableMeta.primaryKey));
    }

    /**
     * 生成删除方法的注解
     *
     * @param tableMeta
     * @param ret
     */
    protected void genMethodDeleteAnnotation(TableMeta tableMeta, StringBuilder ret) {
        ret.append(String.format(methodDeleteAnnotationTemplate, cacheName, tableMeta.entityName.replace("_", ""), tableMeta.primaryKey));
    }

    /**
     * 生成加载方法
     *
     * @param tableMeta
     * @param ret
     */
    protected void genMethodLoad(TableMeta tableMeta, StringBuilder ret) {
        String entity = tableMeta.entityName.replace("_", "");
        ret.append(String.format(methodLoadDefineTemplate, entity, "Object", entity, entity));
    }

    /**
     * 生成更新方法
     *
     * @param tableMeta
     * @param ret
     */
    protected void genMethodUpdate(TableMeta tableMeta, StringBuilder ret) {
        ret.append(String.format(methodUpdateDefineTemplate, tableMeta.entityName.replace("_", "")));
    }

    /**
     * 生成删除方法
     *
     * @param tableMeta
     * @param ret
     */
    protected void genMethodDelete(TableMeta tableMeta, StringBuilder ret) {
        String entity = tableMeta.entityName.replace("_", "");
        ret.append(String.format(methodDeleteDefineTemplate, entity, entity, StringUtils.capitalize(tableMeta.primaryKey)));
    }

    /**
     * 生成插入方法
     *
     * @param tableMeta
     * @param ret
     */
    protected void genMethodInsert(TableMeta tableMeta, StringBuilder ret) {
        ret.append(String.format(methodInsertDefineTemplate, tableMeta.entityName.replace("_", "")));
    }

    protected void wirtToFile(List<TableMeta> tableMetas) {
        try {
            for (TableMeta tableMeta : tableMetas)
                wirtToFile(tableMeta);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * base model 覆盖写入
     */
    protected void wirtToFile(TableMeta tableMeta) throws IOException {
        File dir = new File(daoOutputDir + File.separator + daoPackageName.replace(".", File.separator));
        if (!dir.exists())
            dir.mkdirs();
        String target = dir.toString() + File.separator + "BaseDao" + tableMeta.entityName.replace("_", "") + ".java";
        FileWriter fw = new FileWriter(target);
        try {
            fw.write(tableMeta.modelContent);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            fw.close();
        }
    }
}
