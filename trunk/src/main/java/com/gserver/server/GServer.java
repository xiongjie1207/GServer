package com.gserver.server;/** * Copyright (c) 2015-2016, James Xiong 熊杰 (xiongjie.cn@gmail.com). * <p> * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * <p> * http://www.apache.org/licenses/LICENSE-2.0 * <p> * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. * <p> * Created by xiongjie on 2016/12/22. */import com.gserver.core.ActionCommanderBuilder;import com.gserver.core.Commander;import com.gserver.core.ServerInfo;import com.gserver.core.SpringContext;import com.gserver.plugins.IPlugin;import org.apache.log4j.Level;import org.apache.log4j.Logger;import org.springframework.beans.BeansException;import org.springframework.context.ApplicationContext;import org.springframework.context.ApplicationContextAware;import org.springframework.context.ApplicationEvent;import org.springframework.context.ApplicationListener;import org.springframework.context.event.ContextClosedEvent;import org.springframework.context.event.ContextRefreshedEvent;import javax.swing.*;import java.util.ArrayList;import java.util.List;/******************************* * 起初，神创造天地。[创世记 1:1] *******************************/public abstract class GServer implements ApplicationListener<ApplicationEvent>, ApplicationContextAware {    protected Logger logger = Logger.getLogger(this.getClass());    private boolean running=false;    private List<IPlugin> plugins = new ArrayList<>();    private List<Commander> commanders = new ArrayList<>();    private String id;    public void startServer() {        running=true;        if (debugModel()) {            logger.setLevel(Level.ALL);        }        buildCommander();        buildPlugin();    }    public String getId() {        return id;    }    public void setId(String id) {        this.id = id;    }    public void stopServer() {        running=false;        commanders.clear();        for (IPlugin plugin : plugins) {            plugin.stop();        }        plugins.clear();    }    protected void afterStartServer() {        merryChristmasTree();    }    protected void beforeStartServer(){    }    protected void beforeStopServer(){    }    protected void afterStopServer() {        if (logger.getLevel() == Level.ALL) {            System.out.println("server:"+id+" stopServer..........");        }    }    public void merryChristmasTree() {        String[] stars = {                "              *                 ",                "      *      ***          *     ",                "          *********             ",                "   *         ***     *          ",                "           *******              ",                "       ***************      *   ",                "           *******    *         ",                " *        **********   *        ",                "      *****************         ",                "   ***********************      ",                "    *       |||||    *          ",                "    *       |||||    *          ",                "    *       |||||               ",                "*****************************   ",                " 2016.12.25 Merry Christmas!    ",                "",                "GServer Version:" + ServerInfo.version,                "*****************************\n",                "server:"+id+" startServer..........\n"        };        if (logger.getLevel() == Level.ALL) {            for (String s : stars) {                System.out.println(s);            }            showGirl();        }    }    private void showGirl() {        SwingUtilities.invokeLater(new Runnable() {            @Override            public void run() {                try {                    if (!getPicPath().trim().isEmpty()) {                        new WateWave(getPicPath());                    }                } catch (Exception e) {                    logger.error(e);                }            }        });    }    private void buildCommander() {        initCommanders(commanders);        ActionCommanderBuilder builder = new ActionCommanderBuilder();        for (Commander commander : commanders) {            builder.buildCommanderAction(commander);        }    }    private void buildPlugin() {        initPlugins(plugins);        for (IPlugin plugin : plugins) {            boolean result = plugin.start();            if (!result) {                logger.error("plugin:" + plugin.getClass().getSimpleName() + " start faild");            }        }    }    protected boolean debugModel() {        return true;    }    protected String getPicPath() {        return "";    }    protected abstract void initCommanders(List<Commander> commanders);    protected abstract void initPlugins(List<IPlugin> plugins);    @Override    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {        SpringContext.setApplicationContext(applicationContext);    }    @Override    public void onApplicationEvent(ApplicationEvent applicationEvent) {        if(applicationEvent instanceof ContextRefreshedEvent){            if(running){                return;            }            beforeStartServer();            startServer();            afterStartServer();        }else if(applicationEvent instanceof ContextClosedEvent ){            if(running) {                beforeStopServer();                stopServer();                afterStopServer();            }        }    }}