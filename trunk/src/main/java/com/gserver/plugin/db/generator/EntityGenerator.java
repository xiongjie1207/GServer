/**
 * Copyright (c) 2015-2016, James Xiong 熊杰 (xiongjie.cn@gmail.com).
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * <p>
 * Created by xiongjie on 2016/12/22.
 */

package com.gserver.plugin.db.generator;

import org.apache.commons.lang.StringUtils;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;

/**
 * entity 生成器
 */
public class EntityGenerator {

    protected String packageTemplate = "package %s;\n";
    protected String importTemplate = "import java.io.Serializable;\n"
            + "import com.gserver.plugins.db.descriptor.IEntity;\n"
            + "import com.gserver.plugin.db.annotation.Table;\n";
    protected String classDescriptTemplate = "/**\nGenerated by GServer, do not modify this file.\n**/\n";
    protected String classAnnotationTemplate = "@Table(\"%s\")\n";
    protected String classDefineTemplate = "public class %s implements Serializable, IEntity {\n\tprivate static final long serialVersionUID = 1L;";
    protected String fieldTemplate = "\n\tprivate %s %s;";
    protected String setterTemplate = "\n\tpublic void %s(%s %s) {\n\n\t\tthis.%s = %s;\n\n\t}";
    protected String getterTemplate = "\n\tpublic %s %s() {\n\n\t\treturn this.%s;\n\n\t}";

    protected String entityPackageName;
    protected String entityOutputDir;


    public EntityGenerator(String entityPackageName, String entityOutputDir) {
        if (StringUtils.isBlank(entityPackageName))
            throw new IllegalArgumentException("entityPackageName can not be blank.");
        if (entityPackageName.contains("/") || entityPackageName.contains("\\"))
            throw new IllegalArgumentException("entityPackageName error : " + entityPackageName);
        if (StringUtils.isBlank(entityOutputDir))
            throw new IllegalArgumentException("entityOutputDir can not be blank.");

        this.entityPackageName = entityPackageName;
        this.entityOutputDir = entityOutputDir;
    }

    public void generate(List<TableMeta> tableMetas) {
        System.out.println("Generate base model ...");
        for (TableMeta tableMeta : tableMetas)
            genModelContent(tableMeta);
        wirtToFile(tableMetas);
    }

    protected void genModelContent(TableMeta tableMeta) {
        StringBuilder ret = new StringBuilder();
        genPackage(ret);
        genImport(ret);
        genClassDes(ret);
        genClassAnnotation(tableMeta, ret);
        genClassDefine(tableMeta, ret);
        for (ColumnMeta columnMeta : tableMeta.columnMetas) {
            genField(columnMeta, ret);
        }
        ret.append(String.format("%n"));
        for (ColumnMeta columnMeta : tableMeta.columnMetas) {
            genSetMethodName(columnMeta, ret);
            genGetMethodName(columnMeta, ret);
        }
        ret.append(String.format("}%n"));
        tableMeta.modelContent = ret.toString();
    }

    protected void genPackage(StringBuilder ret) {
        ret.append(String.format(packageTemplate, entityPackageName));
    }

    protected void genImport(StringBuilder ret) {
        ret.append(String.format(importTemplate));
    }

    protected void genClassDefine(TableMeta tableMeta, StringBuilder ret) {
        ret.append(String.format(classDefineTemplate, tableMeta.entityName.replace("_", "")));
    }

    protected void genClassDes(StringBuilder ret) {
        ret.append(classDescriptTemplate);
    }

    protected void genClassAnnotation(TableMeta tableMeta, StringBuilder ret) {
        ret.append(String.format(classAnnotationTemplate, tableMeta.entityName));
    }

    protected void genField(ColumnMeta columnMeta, StringBuilder ret) {
        String fieldName = columnMeta.attrName;
        String setter = String.format(fieldTemplate, columnMeta.javaType, fieldName);
        ret.append(setter);
    }

    protected void genSetMethodName(ColumnMeta columnMeta, StringBuilder ret) {
        String setterMethodName = "set" + StringUtils.capitalize(columnMeta.attrName);
        String argName = columnMeta.attrName;
        String setter = String.format(setterTemplate, setterMethodName, columnMeta.javaType, argName, columnMeta.name,
                argName);
        ret.append(setter);
    }

    protected void genGetMethodName(ColumnMeta columnMeta, StringBuilder ret) {
        String getterMethodName = "get" + StringUtils.capitalize(columnMeta.attrName);
        String getter = String.format(getterTemplate, columnMeta.javaType, getterMethodName, columnMeta.name);
        ret.append(getter);
    }

    protected void wirtToFile(List<TableMeta> tableMetas) {
        try {
            for (TableMeta tableMeta : tableMetas)
                wirtToFile(tableMeta);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * base model 覆盖写入
     */
    protected void wirtToFile(TableMeta tableMeta) throws IOException {
        File dir = new File(entityOutputDir + File.separator + entityPackageName.replace(".", File.separator));
        if (!dir.exists())
            dir.mkdirs();
        String target = dir.toString() + File.separator + tableMeta.entityName.replace("_","") + ".java";
        FileWriter fw = new FileWriter(target);
        try {
            fw.write(tableMeta.modelContent);
        } finally {
            fw.close();
        }
    }
}
