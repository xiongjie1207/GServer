package com.wegame.framework.server;/** * Copyright (c) 2015-2016, James Xiong 熊杰 (xiongjie.cn@gmail.com). * <p> * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * <p> * http://www.apache.org/licenses/LICENSE-2.0 * <p> * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. * <p> * Created by xiongjie on 2016/12/22. */import static com.wegame.utils.AppStatus.Running;import static com.wegame.utils.AppStatus.Stoped;import com.wegame.framework.config.EventLoopConfig;import com.wegame.framework.config.ServerConfig;import com.wegame.framework.core.GameComponentScanner;import com.wegame.framework.core.GameEventLoop;import com.wegame.framework.core.PluginManager;import com.wegame.framework.core.ServerInfo;import com.wegame.framework.core.SpringContext;import com.wegame.framework.plugin.IPlugin;import com.wegame.utils.AppStatus;import com.wegame.utils.HostUtil;import java.util.ArrayList;import java.util.List;import javax.swing.SwingUtilities;import lombok.Getter;import lombok.Setter;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.BeansException;import org.springframework.boot.builder.SpringApplicationBuilder;import org.springframework.boot.context.event.ApplicationReadyEvent;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.boot.web.servlet.support.SpringBootServletInitializer;import org.springframework.context.ApplicationContext;import org.springframework.context.ApplicationContextAware;import org.springframework.context.ApplicationListener;import org.springframework.context.annotation.Bean;import org.springframework.util.StopWatch;/******************************* * 起初，神创造天地。[创世记 1:1] ****************************** * @author xiongjie*/@Slf4jpublic abstract class Launcher extends SpringBootServletInitializer    implements ApplicationListener<ApplicationReadyEvent>, ApplicationContextAware {    private final List<IPlugin> plugins = new ArrayList<>();    @Getter    @Setter    private String id = null;    private String ver = "1.1";    public void startServer() {        StopWatch stopWatch = new StopWatch();        stopWatch.start();        AppStatus.Status = AppStatus.Starting;        log.info("Starting server.......");        beforeStart();        buildPlugin();        EventLoopConfig eventLoopConfig = SpringContext.getBean(EventLoopConfig.class);        GameEventLoop.getInstance()            .start(eventLoopConfig.getInitialDelay(), eventLoopConfig.getDelay());        log.info(ServerInfo.memoryInfo());        AppStatus.Status = Running;        afterStart();        log.info("游戏服务启动，耗时[{}]秒", stopWatch.getTotalTimeSeconds());    }    @Bean    @ConfigurationProperties(prefix = "game.server.eventloop.config")    public EventLoopConfig createEventLoopConfig() {        return new EventLoopConfig();    }    @Bean    @ConfigurationProperties(prefix = "game.server.config")    public ServerConfig createServerConfig() {        return new ServerConfig();    }    @Bean    public GameComponentScanner createAnnotationScanner() {        return new GameComponentScanner();    }    @Override    public void onApplicationEvent(ApplicationReadyEvent event) {        if (SpringContext.getApplicationContext() == event.getApplicationContext()) {            startServer();        }    }    @Override    protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) {        return builder.sources(this.getClass());    }    protected void afterStart() {        if (id == null) {            try {                ServerConfig config = SpringContext.getBean(ServerConfig.class);                id = HostUtil.getLocalHostLANAddress().getHostAddress() + ":" +                    config.getPort();            } catch (Exception e) {                log.error("afterStartServer", e);            }        }        merryChristmasTree();    }    protected void beforeStart() {    }    protected void beforeStop() {    }    protected void afterStop() {        log.info("App:" + id + " stopServer..........");    }    private void merryChristmasTree() {        String[] stars = {            "              *                 ",            "      *      ***          *     ",            "          *********             ",            "   *         ***     *          ",            "           *******              ",            "       ***************      *   ",            "           *******    *         ",            " *        **********   *        ",            "      *****************         ",            "   ***********************      ",            "    *       |||||    *          ",            "    *       |||||    *          ",            "    *       |||||               ",            "*****************************   ",            " 2016.12.25 Merry Christmas!    ",            "",            "GServer Version:" + ver,            "*****************************\n",            "App:" + id + " start..........\n"        };        for (String s : stars) {            System.out.println(s);        }        showGirl();    }    private void showGirl() {        SwingUtilities.invokeLater(() -> {            try {                if (!getPicPath().trim().isEmpty()) {                    new WateWave(getPicPath());                }            } catch (Exception e) {                log.error(e.getMessage());            }        });    }    private void buildPlugin() {        for (IPlugin component : PluginManager.getInstance().getPlugins()) {            boolean result = component.start();            if (!result) {                log.error("component:" + component.getClass().getSimpleName() + " start faild");            }        }    }    protected String getPicPath() {        return "";    }    @Override    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {        SpringContext.setApplicationContext(applicationContext);    }    public void stopServer() {        AppStatus.Status = AppStatus.Shutdowning;        log.info("Begin to shutdown App ");        beforeStop();        for (IPlugin plugin : plugins) {            plugin.stop();        }        GameEventLoop.getInstance().stop();        plugins.clear();        afterStop();        // 注销性能收集        log.info("App shutdowned");        AppStatus.Status = Stoped;    }}