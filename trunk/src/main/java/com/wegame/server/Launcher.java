package com.wegame.server;/** * Copyright (c) 2015-2016, James Xiong 熊杰 (xiongjie.cn@gmail.com). * <p> * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * <p> * http://www.apache.org/licenses/LICENSE-2.0 * <p> * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. * <p> * Created by xiongjie on 2016/12/22. */import com.wegame.components.IComponent;import com.wegame.config.ServerConfig;import com.wegame.core.ComponentManager;import com.wegame.core.ServerInfo;import com.wegame.core.SpringContext;import com.wegame.utils.HostUtil;import com.wegame.utils.AppStatus;import org.slf4j.LoggerFactory;import org.springframework.beans.BeansException;import org.springframework.boot.context.event.ApplicationStartedEvent;import org.springframework.context.ApplicationContext;import org.springframework.context.ApplicationContextAware;import org.springframework.context.ApplicationListener;import javax.swing.*;import java.util.ArrayList;import java.util.List;import static com.wegame.utils.AppStatus.Running;import static com.wegame.utils.AppStatus.Stoped;/******************************* * 起初，神创造天地。[创世记 1:1] ****************************** * @author xiongjie*/public abstract class Launcher implements ApplicationListener<ApplicationStartedEvent>, ApplicationContextAware {    private List<IComponent> components = new ArrayList<>();    private String id = null;    private void startServer() {        AppStatus.Status = AppStatus.Starting;        LoggerFactory.getLogger(this.getClass()).info("Starting server.......");        beforeStart();        buildPlugin();        LoggerFactory.getLogger(this.getClass()).info(ServerInfo.memoryInfo());        AppStatus.Status = Running;        afterStart();    }    @Override    public void onApplicationEvent(ApplicationStartedEvent event) {        if(SpringContext.getApplicationContext()==event.getApplicationContext()){            startServer();        }    }    public String getId() {        return id;    }    protected void afterStart() {        if (id == null) {            try {                id = HostUtil.getLocalHostLANAddress().getHostAddress() + ":" + ServerConfig.getInstance().getPort();            } catch (Exception e) {                LoggerFactory.getLogger(this.getClass()).error("afterStartServer", e);            }        }        merryChristmasTree();    }    protected void beforeStart() {    }    protected void beforeStop() {    }    protected void afterStop() {        LoggerFactory.getLogger(this.getClass()).info("App:" + id + " stopServer..........");    }    private void merryChristmasTree() {        String[] stars = {                "              *                 ",                "      *      ***          *     ",                "          *********             ",                "   *         ***     *          ",                "           *******              ",                "       ***************      *   ",                "           *******    *         ",                " *        **********   *        ",                "      *****************         ",                "   ***********************      ",                "    *       |||||    *          ",                "    *       |||||    *          ",                "    *       |||||               ",                "*****************************   ",                " 2016.12.25 Merry Christmas!    ",                "",                "GServer Version:" + ServerConfig.getInstance().getVersion(),                "*****************************\n",                "App:" + id + " start..........\n"        };        for (String s : stars) {            System.out.println(s);        }        showGirl();    }    private void showGirl() {        SwingUtilities.invokeLater(new Runnable() {            @Override            public void run() {                try {                    if (!getPicPath().trim().isEmpty()) {                        new WateWave(getPicPath());                    }                } catch (Exception e) {                    LoggerFactory.getLogger(this.getClass()).error(e.getMessage());                }            }        });    }    private void buildPlugin() {        for (IComponent component : ComponentManager.getInstance().getComponents()) {            boolean result = component.start();            if (!result) {                LoggerFactory.getLogger(this.getClass()).error("component:" + component.getClass().getSimpleName() + " start faild");            }        }    }    protected String getPicPath() {        return "";    }    @Override    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {        SpringContext.setApplicationContext(applicationContext);    }    public void stopServer() {        AppStatus.Status = AppStatus.Shutdowning;        LoggerFactory.getLogger(this.getClass()).info("Begin to shutdown App ");        beforeStop();        for (IComponent plugin : components) {            plugin.stop();        }        components.clear();        afterStop();        // 注销性能收集        LoggerFactory.getLogger(this.getClass()).info("App shutdowned");        AppStatus.Status = Stoped;    }}