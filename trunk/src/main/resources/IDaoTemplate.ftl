package ${packageName};

import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.cache.annotation.Caching;
import com.gserver.components.db.descriptor.QueryResult;
import com.gserver.components.db.spring.jdbc.SpringJDBCBuilder;
import org.springframework.aop.framework.AopContext;
${importClasses}

/**
 * Generated by GServer, do not modify this file.
 **/
public interface IDao${entity} {
	@Cacheable(value = "${cacheName}", key = "'${entity}_id/'+#id")
	default ${entity} _load(Object id) {
		QueryResult result = SpringJDBCBuilder.getInstance().buildDAL().selectByPrimaryKey(id,${entity}.class);
		if (result != null) {
			return result.as(${entity}.class);
		}
		return null;
	}
	@Caching(evict = { @CacheEvict(value = "${cacheName}", key = "'${entity}_id/'+#id") })
	default void _delete(Object id) {
		SpringJDBCBuilder.getInstance().buildDAL().deleteByPrimaryKey(id,${entity}.class);
	}
	@Caching(evict = { @CacheEvict(value = "${cacheName}", key = "'${entity}_id/'+#entity.${primaryKey}") })
	default void _update(${entity} entity) {
		SpringJDBCBuilder.getInstance().buildDAL().updateByPrimaryKey(entity);
	}

	default long insert(${entity} entity) {
		return SpringJDBCBuilder.getInstance().buildDAL().insert(entity);
	}
	default void asyncInsert(${entity} entity) {
		SpringJDBCBuilder.getInstance().buildDAL().asynInsert(entity);
	}
	default ${entity} load(Object id) {
		return ((IDao${entity})AopContext.currentProxy())._load(id);
	}
	default void delete(Object id) {
		((IDao${entity})AopContext.currentProxy())._delete(id);
	}
	default void update(${entity} entity) {
		((IDao${entity})AopContext.currentProxy())._update(entity);
	}

}
